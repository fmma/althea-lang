
f: a -> b
x: a
--
f x: b

id: a -> a
const: a -> b -> a

f : a -> b
g : b -> c
--
g . f : a -> c

inl: a -> a + b
x => "0" ++ x

inr: b -> a + b
x => "1" ++ x

f: a -> c
g: b -> c
--
[f, g]: a + b -> c

f: a -> c
g: b -> d
--
f + g: a + b -> c + d

fst: a * b -> a
snd: a * b -> b

f: a -> b
g: a -> c
--
<f, g>: a -> b * c

f: a -> c
g: b -> d
--
f * g: a * b -> c * d

a => f[a]
b => g[b]
c => h[c]
.

Pair: a -> b -> a * b.
Fst: a * b -> a.
Snd: a * b -> b.

Inl: a -> a + b
a => a.

Inr: b -> a + b
b => b.

Curry:
f: a * b -> c
-----------
a -> b -> c

x, y => f[x * y]
.

Uncurry:
f: a -> b -> c
--------------
a * b -> c

a * b => f[a, b]
.

And: 2 * 2 -> 2
0 * _ => 0
1 * b => b
.

Or: 2 * 2 -> 2
1 * _ => 1
0 * b => b
.

List[a] = 1 + a * List[a]

f: b * a -> b
x0: b
-------------------------
Foldl[f,x0]: List[a] -> b

0 => x0
x * xs => Foldl[f, f[x0 * x], xs]
.

Length: List[a] -> Nat
0 => 0
x * xs => 1 + Length[xs]
.

Compose:
f: a -> b
g: b -> c
---------
a -> c

x => f[g[x]]
.

Until:
c: a -> 2
f: a -> a
----------
a -> a

a => 
    case c[x]
    0 => x
    1 => Until[c, f[x]]
.

Filter:
p: a -> 2
List[a]
----------
List[a]

0 => 0
x * xs =>
    case p[x]
    0 => Filter[p, xs]
    1 => x * Filter[p, xs]

Init: List[a] -> List[a] + 1
0 => 1
x * xs =>
    case xs
    1 => 0
    x0 * xs0 => x0 * Init[xs0]

Head : List[a] -> a + 1
0 => 0
x * _ => x

Tail: List[a] -> List[a] + 1
0 => 0 -- Nil or nothing?
_ * xs => xs


xs: List[a]
ys: List[a]
-----------------
xs ++ ys: List[a]

case xs
0 => ys
x * xs0 => x * (xs0 ++ ys)

